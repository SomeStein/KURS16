**free
ctl-opt main(AUFG006TST) dftactgrp(*no) actgrp(*caller) debug(*yes) BNDDIR('BNDDIR');

// compile-time constants (muss zu convert passen)
dcl-c TOTAL_LEN const(30);

/Include QPTTSRC,AUFG006

dcl-proc AUFG006TST;
  dcl-pi *n;
  end-pi;

  // test cases (max 30 chars each) -- keine INZ beim Array, zur Laufzeit f√ºllen
  dcl-s tests char(TOTAL_LEN) dim(20);

  dcl-s i int(5);
  dcl-s teststring char(TOTAL_LEN);

  // runtime initialization (kompatibel mit allen Compilern)
  tests(1)  = '123,45';
  tests(2)  = '';
  tests(3)  = '987654321098765432109876543210';
  tests(4)  = ',12345678901234567890123456789';
  tests(5)  = '  12345.67890  ';
  tests(6)  = '-12345.67890';
  tests(7)  = '+12345.67890';
  tests(8)  = '12345,67890-';
  tests(9)  = '12345,67890+';
  tests(10) = '12abc34,5def6gh7890';
  tests(11) = '++12345.67890';
  tests(12) = '--12345.67890';
  tests(13) = '12345.67890++';
  tests(14) = '12345.67890--';
  tests(15) = '999999999999999999999.999999999';
  tests(16) = '-999999999999999999999.999999999';
  tests(17) = '000000000000000000000.0001';
  tests(18) = '-000000000000000000000.0001';
  tests(19) = '123,456,789.012345';
  tests(20) = '123.456.789,012345';

  for i = 1 to %elem(tests);
    teststring = tests(i);
    dsply ( 'Testfall ' + %char(i) + ': "' + teststring + '"' );
    dsply ( '  Ergebnis: ' + %char(convert(teststring)));
  endfor;

  dsply 'Tests abgeschlossen';
end-proc;
